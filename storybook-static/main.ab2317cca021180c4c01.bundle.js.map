{"version":3,"file":"main.ab2317cca021180c4c01.bundle.js","sources":["webpack:///./src/components/Button.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { css } from \"@emotion/core\";\n\nimport themes from \"../theme/themes\";\n\n// CSS\nconst ButtonStyle = theme => css`\n  position: relative;\n  cursor: pointer;\n  outline: none;\n  margin: 0;\n  padding: 20px;\n  width: auto;\n  text-align: center;\n  display: inline-block;\n  border: none;\n  border-radius: 6px;\n  background: ${theme.primaryColor};\n  color: ${theme.backgroundColor};\n  font-size: 16px;\n  font-family: ${theme.primaryFont};\n  line-height: inherit;\n  font-weight: inherit;\n  transform: translate3d(0, 0, 0);\n  transition: 0.2s ease-in-out;\n\n  &:hover {\n    transform: translate3d(0, -3px, 0);\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);\n  }\n\n  &:active {\n    background: ${theme.primaryShade5};\n    transform: translate3d(0, 0, 0);\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);\n  }\n\n  &:focus {\n    box-shadow: 0 0px 8px ${theme.primaryShade1},\n      0 0px 8px ${theme.primaryShade1};\n  }\n`;\n\nconst disabledStyle = css`\n  opacity: 0.6;\n  cursor: default;\n  transition: none;\n  transform: translate3d(0, 0, 0);\n  pointer-events: none;\n`;\n\nconst SecondaryButtonStyle = theme => css`\n  background: ${theme.secondaryColor};\n  color: ${theme.backgroundColor};\n\n  &:active {\n    background: ${theme.secondaryShade5};\n  }\n\n  &:focus {\n    box-shadow: 0 0px 8px ${theme.secondaryShade1},\n      0 0px 8px ${theme.secondaryShade1};\n  }\n`;\n\nconst Accent1ButtonStyle = theme => css`\n  background: ${theme.accentColor};\n  color: ${theme.backgroundColor};\n\n  &:active {\n    background: ${theme.accentShade5};\n  }\n\n  &:focus {\n    box-shadow: 0 0px 8px ${theme.accentShade1}, 0 0px 8px ${theme.accentShade1};\n  }\n`;\n\nconst Accent2ButtonStyle = theme => css`\n  background: ${theme.accent2Color};\n  color: ${theme.backgroundColor};\n\n  &:active {\n    background: ${theme.accent2Shade5};\n  }\n\n  &:focus {\n    box-shadow: 0 0px 8px ${theme.accent2Shade1},\n      0 0px 8px ${theme.accent2Shade1};\n  }\n`;\n\nconst Accent3ButtonStyle = theme => css`\n  background: ${theme.accent3Color};\n  color: ${theme.backgroundColor};\n\n  &:active {\n    background: ${theme.accent3Shade5};\n  }\n\n  &:focus {\n    box-shadow: 0 0px 8px ${theme.accent3Shade1},\n      0 0px 8px ${theme.accent3Shade1};\n  }\n`;\n\nconst NeutralButtonStyle = theme => css`\n  background: ${theme.neutralColor};\n  color: ${theme.backgroundColor};\n\n  &:active {\n    background: ${theme.neutralColor5};\n  }\n\n  &:focus {\n    box-shadow: 0 0px 8px ${theme.neutralColor4},\n      0 0px 8px ${theme.neutralColor4};\n  }\n`;\n\nconst SmallButtonStyle = css`\n  padding: 4px 12px;\n  font-size: 14px;\n`;\n\nconst MediumButtonStyle = css`\n  padding: 10px;\n`;\n\nconst composeStyles = ({ themeObject, variant, size, disabled }) => {\n  const cssStyles = [ButtonStyle(themeObject)];\n  const variantCases = {\n    secondary: () => cssStyles.push(SecondaryButtonStyle(themeObject)),\n    accent1: () => cssStyles.push(Accent1ButtonStyle(themeObject)),\n    accent2: () => cssStyles.push(Accent2ButtonStyle(themeObject)),\n    accent3: () => cssStyles.push(Accent3ButtonStyle(themeObject)),\n    neutral: () => cssStyles.push(NeutralButtonStyle(themeObject))\n  };\n  if (variantCases[variant]) {\n    variantCases[variant]();\n  }\n  const sizeCases = {\n    small: () => cssStyles.push(SmallButtonStyle),\n    medium: () => cssStyles.push(MediumButtonStyle)\n  };\n  if (sizeCases[size]) {\n    sizeCases[size]();\n  }\n\n  disabled && cssStyles.push(disabledStyle);\n\n  return cssStyles;\n};\n\nfunction Button({\n  as: Element,\n  id,\n  onClick,\n  variant,\n  size,\n  theme,\n  disabled,\n  ...props\n}) {\n  const [themeObject, setThemeObject] = useState(themes[theme]);\n  useEffect(() => {\n    if (theme === \"light\" || theme === \"dark\") {\n      const nextThemeObject = themes[theme];\n      setThemeObject(nextThemeObject);\n    }\n  }, [theme]);\n  const composedStyles = composeStyles({\n    themeObject,\n    variant,\n    size,\n    disabled\n  });\n  const type = Element === \"button\" && !props.type ? \"button\" : null;\n\n  return (\n    <Element\n      css={composedStyles}\n      id={id}\n      data-testid={id}\n      onClick={onClick}\n      type={type}\n      disabled={disabled}\n      {...props}\n    >\n      <span>{props.children}</span>\n    </Element>\n  );\n}\n\nButton.defaultProps = {\n  as: \"button\",\n  id: \"\",\n  children: null,\n  disabled: false,\n  onClick: () => {},\n  theme: \"light\",\n  variant: \"primary\",\n  size: \"large\"\n};\n\n// enumarables: todo add to proptypes\n// variant: [\"primary\", \"secondary\", \"accent1\", \"accent2\", \"accent3\", \"neutral\"]\n// size: [\"large\", \"medium\", \"small\"]\n// theme [\"light\",\"dark\"]\n\nexport default Button;\n"],"mappings":"AA2CA","sourceRoot":""}